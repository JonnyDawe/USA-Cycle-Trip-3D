(self.webpackChunk=self.webpackChunk||[]).push([[8397],{18397:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>j});var n=r(78155),i=r(88903),s=(r(80219),r(80987)),o=r(2903),a=r(89710),l=r(98548),u=r(31531),N=r(79949);function p(e){return{geometryType:(0,a.d)(e[0]),geometries:e.map((e=>e.toJSON()))}}function c(e,t,r){const n=(0,a.G)(t);return e.map((e=>{const t=n.fromJSON(e);return t.spatialReference=r,t}))}r(20215),r(20736),r(4169),r(92858);const y=new u.o({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"});let f=class extends n.a{constructor(e){super(e),this.deviationUnit=null,this.geometries=null,this.maxDeviation=null}};(0,n.e)([(0,i.y)({type:String,json:{write:!0}})],f.prototype,"deviationUnit",void 0),(0,n.e)([(0,i.y)({json:{read:{reader:e=>e?e.map((e=>(0,a.p)(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],f.prototype,"geometries",void 0),(0,n.e)([(0,i.y)({type:Number,json:{write:!0}})],f.prototype,"maxDeviation",void 0),f=(0,n.e)([(0,i.n)("esri.rest.support.GeneralizeParameters")],f),f.from=(0,i.d)(f);var m=f;const d=new u.o({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});let T=class extends n.a{constructor(e){super(e),this.calculationType=null,this.geodesic=null,this.lengthUnit=null,this.polylines=null}};(0,n.e)([(0,i.y)({type:String,json:{write:!0}})],T.prototype,"calculationType",void 0),(0,n.e)([(0,i.y)({type:Boolean,json:{write:!0}})],T.prototype,"geodesic",void 0),(0,n.e)([(0,i.y)({json:{write:!0}})],T.prototype,"lengthUnit",void 0),(0,n.e)([(0,i.y)({type:[l.m],json:{read:{reader:e=>e?e.map((e=>(0,a.p)(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],T.prototype,"polylines",void 0),T=(0,n.e)([(0,i.n)("esri.rest.support.LengthsParameters")],T),T.from=(0,i.d)(T);var I=T;const g=new u.o({preserveShape:"preserve-shape"});let S=class extends n.a{constructor(e){super(e),this.bevelRatio=null,this.geometries=null,this.offsetDistance=null,this.offsetHow=null,this.offsetUnit=null}};(0,n.e)([(0,i.y)({type:Number,json:{write:!0}})],S.prototype,"bevelRatio",void 0),(0,n.e)([(0,i.y)({json:{read:{reader:e=>e?e.map((e=>(0,a.p)(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],S.prototype,"geometries",void 0),(0,n.e)([(0,i.y)({type:Number,json:{write:!0}})],S.prototype,"offsetDistance",void 0),(0,n.e)([(0,i.y)({type:String,json:{write:!0}})],S.prototype,"offsetHow",void 0),(0,n.e)([(0,i.y)({type:String,json:{write:!0}})],S.prototype,"offsetUnit",void 0),S=(0,n.e)([(0,i.n)("esri.rest.support.OffsetParameters")],S),S.from=(0,i.d)(S);var _=S;const O=new u.o({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),R=new u.o({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});const U=(0,i.d)(N.a);let h=class extends n.a{constructor(e){super(e),this.geometries1=null,this.geometries2=null,this.relation=null,this.relationParameter=null}};(0,n.e)([(0,i.y)({json:{read:{reader:e=>e?e.map((e=>(0,a.p)(e))):null},write:{writer:(e,t)=>{t.geometries1=e.map((e=>e.toJSON()))}}}})],h.prototype,"geometries1",void 0),(0,n.e)([(0,i.y)({json:{read:{reader:e=>e?e.map((e=>(0,a.p)(e))):null},write:{writer:(e,t)=>{t.geometries2=e.map((e=>e.toJSON()))}}}})],h.prototype,"geometries2",void 0),(0,n.e)([(0,i.y)({type:String,json:{write:!0}})],h.prototype,"relation",void 0),(0,n.e)([(0,i.y)({type:String,json:{write:!0}})],h.prototype,"relationParameter",void 0),h=(0,n.e)([(0,i.n)("esri.rest.support.RelationParameters")],h),h.from=(0,i.d)(h);var E=h;const A=new u.o({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});let J=class extends n.a{constructor(e){super(e),this.extendHow="default-curve-extension",this.polylines=null,this.trimExtendTo=null}};(0,n.e)([(0,i.y)({type:String,json:{write:!0}})],J.prototype,"extendHow",void 0),(0,n.e)([(0,i.y)({type:[l.m],json:{read:{reader:e=>e?e.map((e=>(0,a.p)(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],J.prototype,"polylines",void 0),(0,n.e)([(0,i.y)({json:{read:{reader:e=>e?(0,a.p)(e):null},write:{writer:(e,t)=>{t.trimExtendTo=e.toJSON()}}}})],J.prototype,"trimExtendTo",void 0),J=(0,n.e)([(0,i.n)("esri.rest.support.TrimExtendParameters")],J),J.from=(0,i.d)(J);var L=J;const w=new u.o({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});let v=class extends o.p{constructor(e){super(e),this.url=null}areasAndLengths(e,t){return async function(e,t,r){const n=(0,o.e)(e),i={...n.query,f:"json",...t.toJSON()},a=(0,o.r)(i,r);return(0,s.L)(n.path+"/areasAndLengths",a).then((e=>e.data))}(this.url,e,t)}autoComplete(e,t,r){return async function(e,t,r,n){const i=t[0].spatialReference,a=(0,o.e)(e),u={...a.query,f:"json",sr:JSON.stringify(i.toJSON()),polygons:JSON.stringify(p(t).geometries),polylines:JSON.stringify(p(r).geometries)},N=(0,o.r)(u,n);return(0,s.L)(a.path+"/autoComplete",N).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new l.j({spatialReference:i,rings:e})))))}(this.url,e,t,r)}buffer(e,t){return async function(e,t,r){const n=(0,o.e)(e),i={...n.query,f:"json",...t.toJSON()},a=t.outSpatialReference||t.geometries[0].spatialReference,u=(0,o.r)(i,r);return(0,s.L)(n.path+"/buffer",u).then((e=>(e.data.geometries||[]).map((({rings:e})=>new l.j({spatialReference:a,rings:e})))))}(this.url,e,t)}convexHull(e,t){return async function(e,t,r){const n=t[0].spatialReference,i=(0,o.e)(e),l={...i.query,f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify(p(t))},u=(0,o.r)(l,r);return(0,s.L)(i.path+"/convexHull",u).then((({data:e})=>(0,a.p)(e.geometry).set({spatialReference:n})))}(this.url,e,t)}cut(e,t,r){return async function(e,t,r,n){const i=(0,o.e)(e),l=t[0].spatialReference,u={...n,query:{...i.query,f:"json",sr:JSON.stringify(l),target:JSON.stringify({geometryType:(0,a.d)(t[0]),geometries:t}),cutter:JSON.stringify(r)}},N=await(0,s.L)(i.path+"/cut",u),{cutIndexes:p,geometries:c=[]}=N.data;return{cutIndexes:p,geometries:c.map((e=>{const t=(0,a.p)(e);return t.spatialReference=l,t}))}}(this.url,e,t,r)}densify(e,t){return async function(e,t,r){const n=t.geometries[0].spatialReference,i=(0,o.e)(e),l={...i.query,f:"json",...t.toJSON()},u=(0,o.r)(l,r);return(0,s.L)(i.path+"/densify",u).then((({data:e})=>(e.geometries||[]).map((e=>(0,a.p)(e).set({spatialReference:n})))))}(this.url,e,t)}difference(e,t,r){return async function(e,t,r,n){const i=t[0].spatialReference,l=(0,o.e)(e);let u={query:{...l.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(p(t)),geometry:JSON.stringify({geometryType:(0,a.d)(r),geometry:r.toJSON()})}};return n&&(u={...n,...u}),(0,s.L)(l.path+"/difference",u).then((({data:e})=>(e.geometries||[]).map((e=>(0,a.p)(e).set({spatialReference:i})))))}(this.url,e,t,r)}distance(e,t){return async function(e,t,r){const n=(0,o.e)(e),i={...n.query,f:"json",...t.toJSON()},a=(0,o.r)(i,r);return(0,s.L)(n.path+"/distance",a).then((({data:e})=>e&&e.distance))}(this.url,e,t)}fromGeoCoordinateString(e,t){return async function(e,t,r){const n={};null!=t.sr&&"object"==typeof t.sr?n.sr=t.sr.wkid||JSON.stringify(t.sr):n.sr=t.sr,n.strings=JSON.stringify(t.strings);const i=t.conversionType||"mgrs";n.conversionType=y.toJSON(i),n.conversionMode=t.conversionMode;const a=(0,o.e)(e),l={...a.query,f:"json",...n},u=(0,o.r)(l,r);return(0,s.L)(a.path+"/fromGeoCoordinateString",u).then((({data:e})=>e.coordinates))}(this.url,e,t)}generalize(e,t){return async function(e,t,r){const n=(t=m.from(t)).toJSON(),i=function(e){const{geometries:t,deviationUnit:r,maxDeviation:n}=e.toJSON(),i={maxDeviation:n};return t&&t.length&&(i.geometries=JSON.stringify({geometryType:(0,a.d)(t[0]),geometries:t}),i.sr=JSON.stringify(t[0].spatialReference)),d.write(r,i,"deviationUnit"),i}(t),l=(0,o.e)(e),u={...l.query,f:"json",...i},N=n.geometries[0].spatialReference,p=(0,o.r)(u,r);return(0,s.L)(l.path+"/generalize",p).then((({data:e})=>(e.geometries||[]).map((e=>(0,a.p)(e).set({spatialReference:N})))))}(this.url,e,t)}intersect(e,t,r){return async function(e,t,r,n){const i=t[0].spatialReference,l=(0,o.e)(e),u={...l.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(p(t)),geometry:JSON.stringify({geometryType:(0,a.d)(r),geometry:r.toJSON()})},N=(0,o.r)(u,n);return(0,s.L)(l.path+"/intersect",N).then((({data:e})=>(e.geometries||[]).map((e=>(0,a.p)(e).set({spatialReference:i})))))}(this.url,e,t,r)}labelPoints(e,t){return function(e,t,r){const n=t.map((e=>e.toJSON())),i=t[0].spatialReference,l=(0,o.e)(e),u={...l.query,f:"json",sr:i.wkid?i.wkid:JSON.stringify(i.toJSON()),polygons:JSON.stringify(n)},N=(0,o.r)(u,r);return(0,s.L)(l.path+"/labelPoints",N).then((({data:e})=>(e.labelPoints||[]).map((e=>(0,a.p)(e).set({spatialReference:i})))))}(this.url,e,t)}lengths(e,t){return async function(e,t,r){const n=function(e){const{polylines:t,lengthUnit:r,geodesic:n,calculationType:i}=e.toJSON(),s={};s.polylines=JSON.stringify(t);const o=e.polylines[0].spatialReference;return s.sr=o.wkid?o.wkid:JSON.stringify(o.toJSON()),r&&(s.lengthUnit=r),n&&(s.geodesic=n),i&&(s.calculationType=g.toJSON(i)),s}(t=I.from(t)),i=(0,o.e)(e),a={...i.query,f:"json",...n},l=(0,o.r)(a,r);return(0,s.L)(i.path+"/lengths",l).then((({data:e})=>e))}(this.url,e,t)}offset(e,t){return async function(e,t,r){const n=function(e){const{geometries:t,bevelRatio:r,offsetDistance:n,offsetHow:i,offsetUnit:s}=e.toJSON(),o={bevelRatio:r,offsetDistance:n};return t&&t.length&&(o.geometries=JSON.stringify({geometryType:(0,a.d)(t[0]),geometries:t}),o.sr=JSON.stringify(t[0].spatialReference)),i&&(o.offsetHow=O.toJSON(i)),s&&(o.offsetUnit=R.toJSON(s)),o}(t=_.from(t)),i=(0,o.e)(e),l={...i.query,f:"json",...n},u=t.geometries[0].spatialReference,N=(0,o.r)(l,r);return(0,s.L)(i.path+"/offset",N).then((({data:e})=>(e.geometries||[]).map((e=>(0,a.p)(e).set({spatialReference:u})))))}(this.url,e,t)}project(e,t){return async function(e,t,r){t=U(t);const n=(0,o.e)(e),i={...n.query,f:"json",...t.toJSON()},l=t.outSpatialReference,u=(0,a.d)(t.geometries[0]),N=(0,o.r)(i,r);return(0,s.L)(n.path+"/project",N).then((({data:{geometries:e}})=>c(e,u,l)))}(this.url,e,t)}relation(e,t){return async function(e,t,r){const n=function(e){const{geometries1:t,geometries2:r,relation:n,relationParameter:i}=e.toJSON(),s={};if(t&&t.length){s.geometries1=JSON.stringify({geometryType:(0,a.d)(t[0]),geometries:t});const e=t[0].spatialReference;s.sr=e.wkid?e.wkid:JSON.stringify(e)}return r&&r.length>0&&(s.geometries2=JSON.stringify({geometryType:(0,a.d)(r[0]),geometries:r})),n&&(s.relation=A.toJSON(n)),i&&(s.relationParam=i),s}(t=E.from(t)),i=(0,o.e)(e),l={...i.query,f:"json",...n},u=(0,o.r)(l,r);return(0,s.L)(i.path+"/relation",u).then((({data:e})=>e.relations))}(this.url,e,t)}reshape(e,t,r){return async function(e,t,r,n){const i=t.spatialReference,l=(0,o.e)(e),u={...l.query,f:"json",sr:JSON.stringify(i.toJSON()),target:JSON.stringify({geometryType:(0,a.d)(t),geometry:t.toJSON()}),reshaper:JSON.stringify(r.toJSON())},N=(0,o.r)(u,n);return(0,s.L)(l.path+"/reshape",N).then((({data:e})=>(0,a.p)(e.geometry).set({spatialReference:i})))}(this.url,e,t,r)}simplify(e,t){return async function(e,t,r){const n="string"==typeof e?(0,s.U)(e):e,i=t[0].spatialReference,o=(0,a.d)(t[0]),l={...r,query:{...n.query,f:"json",sr:i.wkid?i.wkid:JSON.stringify(i),geometries:JSON.stringify(p(t))}},{data:u}=await(0,s.L)(n.path+"/simplify",l);return c(u.geometries,o,i)}(this.url,e,t)}toGeoCoordinateString(e,t){return async function(e,t,r){const n={};null!=t.sr&&"object"==typeof t.sr?n.sr=t.sr.wkid||JSON.stringify(t.sr):n.sr=t.sr,n.coordinates=JSON.stringify(t.coordinates);const i=t.conversionType||"mgrs";n.conversionType=y.toJSON(i),n.conversionMode=t.conversionMode,n.numOfDigits=t.numOfDigits,n.rounding=t.rounding,n.addSpaces=t.addSpaces;const a=(0,o.e)(e),l={...a.query,f:"json",...n},u=(0,o.r)(l,r);return(0,s.L)(a.path+"/toGeoCoordinateString",u).then((({data:e})=>e.strings))}(this.url,e,t)}trimExtend(e,t){return async function(e,t,r){const n=function(e){const{extendHow:t,polylines:r,trimExtendTo:n}=e.toJSON(),i={};return i.extendHow=w.toJSON(t),r&&r.length&&(i.polylines=JSON.stringify(r),i.sr=JSON.stringify(r[0].spatialReference)),n&&(i.trimExtendTo=JSON.stringify(n)),i}(t=L.from(t)),i=(0,o.e)(e),a={...i.query,f:"json",...n},u=t.sr,N=(0,o.r)(a,r);return(0,s.L)(i.path+"/trimExtend",N).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new l.m({spatialReference:u,paths:e})))))}(this.url,e,t)}union(e,t){return async function(e,t,r){const n=t[0].spatialReference,i=(0,o.e)(e),l={...i.query,f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify(p(t))},u=(0,o.r)(l,r);return(0,s.L)(i.path+"/union",u).then((({data:e})=>(0,a.p)(e.geometry).set({spatialReference:n})))}(this.url,e,t)}};v.UNIT_METER=9001,v.UNIT_GERMAN_METER=9031,v.UNIT_FOOT=9002,v.UNIT_SURVEY_FOOT=9003,v.UNIT_CLARKE_FOOT=9005,v.UNIT_FATHOM=9014,v.UNIT_NAUTICAL_MILE=9030,v.UNIT_SURVEY_CHAIN=9033,v.UNIT_SURVEY_LINK=9034,v.UNIT_SURVEY_MILE=9035,v.UNIT_KILOMETER=9036,v.UNIT_CLARKE_YARD=9037,v.UNIT_CLARKE_CHAIN=9038,v.UNIT_CLARKE_LINK=9039,v.UNIT_SEARS_YARD=9040,v.UNIT_SEARS_FOOT=9041,v.UNIT_SEARS_CHAIN=9042,v.UNIT_SEARS_LINK=9043,v.UNIT_BENOIT_1895A_YARD=9050,v.UNIT_BENOIT_1895A_FOOT=9051,v.UNIT_BENOIT_1895A_CHAIN=9052,v.UNIT_BENOIT_1895A_LINK=9053,v.UNIT_BENOIT_1895B_YARD=9060,v.UNIT_BENOIT_1895B_FOOT=9061,v.UNIT_BENOIT_1895B_CHAIN=9062,v.UNIT_BENOIT_1895B_LINK=9063,v.UNIT_INDIAN_FOOT=9080,v.UNIT_INDIAN_1937_FOOT=9081,v.UNIT_INDIAN_1962_FOOT=9082,v.UNIT_INDIAN_1975_FOOT=9083,v.UNIT_INDIAN_YARD=9084,v.UNIT_INDIAN_1937_YARD=9085,v.UNIT_INDIAN_1962_YARD=9086,v.UNIT_INDIAN_1975_YARD=9087,v.UNIT_FOOT_1865=9070,v.UNIT_RADIAN=9101,v.UNIT_DEGREE=9102,v.UNIT_ARCMINUTE=9103,v.UNIT_ARCSECOND=9104,v.UNIT_GRAD=9105,v.UNIT_GON=9106,v.UNIT_MICRORADIAN=9109,v.UNIT_ARCMINUTE_CENTESIMAL=9112,v.UNIT_ARCSECOND_CENTESIMAL=9113,v.UNIT_MIL6400=9114,v.UNIT_BRITISH_1936_FOOT=9095,v.UNIT_GOLDCOAST_FOOT=9094,v.UNIT_INTERNATIONAL_CHAIN=109003,v.UNIT_INTERNATIONAL_LINK=109004,v.UNIT_INTERNATIONAL_YARD=109001,v.UNIT_STATUTE_MILE=9093,v.UNIT_SURVEY_YARD=109002,v.UNIT_50KILOMETER_LENGTH=109030,v.UNIT_150KILOMETER_LENGTH=109031,v.UNIT_DECIMETER=109005,v.UNIT_CENTIMETER=109006,v.UNIT_MILLIMETER=109007,v.UNIT_INTERNATIONAL_INCH=109008,v.UNIT_US_SURVEY_INCH=109009,v.UNIT_INTERNATIONAL_ROD=109010,v.UNIT_US_SURVEY_ROD=109011,v.UNIT_US_NAUTICAL_MILE=109012,v.UNIT_UK_NAUTICAL_MILE=109013,v.UNIT_SQUARE_INCHES="esriSquareInches",v.UNIT_SQUARE_FEET="esriSquareFeet",v.UNIT_SQUARE_YARDS="esriSquareYards",v.UNIT_ACRES="esriAcres",v.UNIT_SQUARE_MILES="esriSquareMiles",v.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",v.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",v.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",v.UNIT_SQUARE_METERS="esriSquareMeters",v.UNIT_ARES="esriAres",v.UNIT_HECTARES="esriHectares",v.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",(0,n.e)([(0,i.y)()],v.prototype,"url",void 0),v=(0,n.e)([(0,i.n)("esri.tasks.GeometryService")],v);const j=v}}]);
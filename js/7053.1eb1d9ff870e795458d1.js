(self.webpackChunk=self.webpackChunk||[]).push([[7053],{67053:(e,s,r)=>{"use strict";r.r(s),r.d(s,{default:()=>l}),r(80987);var t=r(84935),o=r(25681),i=r(98548);r(88903),r(80219),r(20736),r(78155),r(20215),r(4169),r(92858),r(31531),r(77606),r(17762),r(60816);const l=class{async decode(e){const s=await(0,o.T)(e.data,e.options);return s&&s.toJSON()}symbolize(e){e.pixelBlock=t.u.fromJSON(e.pixelBlock),e.extent=e.extent?i.M.fromJSON(e.extent):null;const s=this.symbolizer.symbolize(e);return Promise.resolve(s&&s.toJSON())}async updateSymbolizer(e){var s;this.symbolizer=o.N.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null==(s=this.symbolizer)?void 0:s.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const s=this.symbolizer.simpleStretch(t.u.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(s&&s.toJSON())}estimateStatisticsHistograms(e){const s=(0,t.r)(t.u.fromJSON(e.srcPixelBlock));return Promise.resolve(s)}split(e){const s=(0,t.C)(t.u.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return s&&s.forEach(((e,r)=>{s.set(r,null==e?void 0:e.toJSON())})),Promise.resolve(s)}async mosaicAndTransform(e){const s=e.srcPixelBlocks.map((e=>e?new t.u(e):null)),r=(0,t.d)(s,e.srcMosaicSize,null,null,e.alignmentInfo);if(!e.coefs)return r&&r.toJSON();const o=(0,t.T)(r,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return o&&o.toJSON()}}}}]);
(self.webpackChunk=self.webpackChunk||[]).push([[6862],{36862:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>L});var s=t(78155),i=t(80987),a=t(20215),l=t(32769),o=t(80219),n=t(79506),p=t(88903),c=t(20736),u=t(4169),h=t(41290),d=t(98420),y=t(9947),v=t(22064),f=t(54223),_=t(51218),g=t(21793),m=t(13895),S=t(15576),w=t(28941),T=t(19438),b=t(8725),O=t(92858);t(98548),t(31531),t(83731),t(40130),t(36845),t(62121),t(28190),t(25290),t(65352),t(58404),t(21779),t(97325),t(3629),t(43194),t(18559),t(82906),t(52957),t(29126),t(6585),t(3621),t(63358),t(34396),t(81135),t(94527),t(17762),t(60816),t(61888),t(29832),t(31516),t(52109),t(5250),t(49878),t(84271),t(48643),t(73574),t(89710),t(30316),t(4618),t(80657),t(94449),t(71666),t(47365),t(67079),t(78435),t(53902),t(40481),t(78730),t(18143),t(91236),t(99987),t(9612),t(76326);const R=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let k=class extends((0,_.t)((0,v.f)((0,T.s)((0,w.o)((0,m.l)((0,S.w)((0,y.s)((0,v.y)((0,f.p)((0,n.l)((0,l.a)((0,d.i)((0,g.e)(h.b)))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}load(e){const r=(0,o.r)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(a.w).then((()=>this._fetchService(r)))),Promise.resolve(this)}get attributionDataUrl(){var e;const r=null==(e=this.parsedUrl)?void 0:e.path.toLowerCase();return r&&this._getDefaultAttribution(this._getMapName(r))}readSpatialReference(e,r){return(e=e||r.tileInfo&&r.tileInfo.spatialReference)&&O.k.fromJSON(e)}writeSublayers(e,r,t,s){if(!this.loaded||!e)return;const i=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray(),a=[],l={writeSublayerStructure:!1,...s};i.forEach((e=>{const r=e.write({},l);a.push(r)})),a.some((e=>Object.keys(e).length>1))&&(r.layers=a)}get tileServers(){return this._getDefaultTileServers(this.parsedUrl.path)}castTileServers(e){return Array.isArray(e)?e.map((e=>(0,i.U)(e).path)):null}fetchTile(e,r,t,s={}){const{signal:a,timestamp:l}=s,o=this.getTileUrl(e,r,t),n={responseType:"image",signal:a};return null!=l&&(n.query={_ts:s.timestamp}),(0,i.L)(o,n).then((e=>e.data))}getTileUrl(e,r,t){const s=!this.tilemapCache&&this.supportsBlankTile,a=(0,i.C)({...this.parsedUrl.query,blankTile:!s&&null,...this.customParameters,token:this.apiKey}),l=this.tileServers;return`${l&&l.length?l[r%l.length]:this.parsedUrl.path}/tile/${e}/${r}/${t}${a?"?"+a:""}`}_fetchService(e){return new Promise(((r,t)=>{if(this.sourceJSON){if(null!=this.sourceJSON.bandCount&&null!=this.sourceJSON.pixelSizeX)throw new a.s("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new a.s("tile-layer:undefined-url","layer's url is not defined");const s=(0,b.d)(this.parsedUrl.path);if((0,o.r)(s)&&"ImageServer"===s.serverType)throw new a.s("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");(0,i.L)(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)})).then((r=>{if(r.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),10.1===this.version&&!(0,b.w)(this.url))return this._fetchServerVersion(this.url,e).then((e=>{this.read({currentVersion:e})})).catch((()=>{}))}))}_fetchServerVersion(e,r){if(!(0,b.p)(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return(0,i.L)(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then((e=>{if(e.data&&e.data.currentVersion)return e.data.currentVersion;throw new a.s("tile-layer:version-not-available")}))}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r&&r[2]}_getDefaultAttribution(e){if(!e)return;let r;e=e.toLowerCase();for(let t=0,s=R.length;t<s;t++)if(r=R[t],r.toLowerCase().indexOf(e)>-1)return(0,i.T)("//static.arcgis.com/attribution/"+r)}_getDefaultTileServers(e){const r=-1!==e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i),t=-1!==e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};(0,s.e)([(0,p.y)({readOnly:!0})],k.prototype,"attributionDataUrl",null),(0,s.e)([(0,p.y)({type:["show","hide","hide-children"]})],k.prototype,"listMode",void 0),(0,s.e)([(0,p.y)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],k.prototype,"isReference",void 0),(0,s.e)([(0,p.y)({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],k.prototype,"operationalLayerType",void 0),(0,s.e)([(0,p.y)({type:Boolean})],k.prototype,"resampling",void 0),(0,s.e)([(0,p.y)()],k.prototype,"sourceJSON",void 0),(0,s.e)([(0,p.y)({type:O.k})],k.prototype,"spatialReference",void 0),(0,s.e)([(0,u.e)("spatialReference",["spatialReference","tileInfo"])],k.prototype,"readSpatialReference",null),(0,s.e)([(0,p.y)({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],k.prototype,"path",void 0),(0,s.e)([(0,p.y)({readOnly:!0})],k.prototype,"sublayers",void 0),(0,s.e)([(0,s.o)("sublayers",{layers:{type:[v.Q]}})],k.prototype,"writeSublayers",null),(0,s.e)([(0,p.y)({json:{read:!1,write:!1}})],k.prototype,"popupEnabled",void 0),(0,s.e)([(0,p.y)()],k.prototype,"tileServers",null),(0,s.e)([(0,c.c)("tileServers")],k.prototype,"castTileServers",null),(0,s.e)([(0,p.y)({readOnly:!0,json:{read:!1}})],k.prototype,"type",void 0),(0,s.e)([(0,p.y)(m.p)],k.prototype,"url",void 0),k=(0,s.e)([(0,p.n)("esri.layers.TileLayer")],k),k.prototype.fetchTile.__isDefault__=!0;const L=k}}]);
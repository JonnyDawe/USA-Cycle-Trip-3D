import { e as e$1 } from './JSONSupport-9346590f.js';
import { s, g } from './promiseUtils-2ff2b194.js';
import { n, t } from './Message-70b34921.js';
import { y, n as n$1 } from './subclass-fe5fcf78.js';
import { r } from './BitmapTileLayerView2D-bda80787.js';
import { l } from './LayerView2D-71fd8a44.js';
import { h } from './TileInfoView-a80dd3da.js';
import { e } from './TileKey-86c6b8c5.js';
import { p as p$1, c } from './TileStrategy-7442f970.js';
import { d as d$1 } from './LayerView-0b9de845.js';
import { aa as p } from './DefaultUI-99d89841.js';
import { i } from './TileLayerView-8e48f5e9.js';
import { a } from './drapedUtils-a88e796f.js';
import './BitmapTileContainer-18f7207a.js';
import './aaBoundingRect-68336c41.js';
import './Polyline-ccd8fb47.js';
import './Point-ee7951c3.js';
import './reader-fa0f173d.js';
import './SpatialReference-843b1520.js';
import './Bitmap-77e47ee2.js';
import './mat3-6cb40036.js';
import './mathUtils-a477cc74.js';
import './vec2f32-556b449a.js';
import './FramebufferObject-238df962.js';
import './Texture-454f8135.js';
import './DisplayObject-8d4c95bb.js';
import './Loadable-d16b3d7d.js';
import './jsonMap-e142bd84.js';
import './TiledDisplayObject-38ffcb88.js';
import './brushes-b53a5560.js';
import './definitions-8237c146.js';
import './rasterUtils-8b815ad2.js';
import './Utils-12055aa8.js';
import './ShaderCompiler-b2adc15a.js';
import './config-b1f55e66.js';
import './GeometryUtils-d396765a.js';
import './MaterialKey-5b784827.js';
import './TileContainer-b847de65.js';
import './WGLContainer-b2490c0f.js';
import './Container-a08586d2.js';
import './Color-ae84a22a.js';
import './mat4f32-5ff6470f.js';
import './mat4-8eb66d33.js';
import './earcut-d81146f9.js';
import './vec2-513a0296.js';
import './vec2f64-3fb878b3.js';
import './featureConversionUtils-3ad98dca.js';
import './jsonUtils-f0a19240.js';
import './OptimizedFeature-ccef5b1d.js';
import './OptimizedFeatureSet-be12a9b8.js';
import './Collection-32506e74.js';
import './collectionUtils-a13e45d8.js';
import './watchUtils-06a91cc9.js';
import './Queue-a5bdb7c1.js';
import './HandleOwner-fbf91095.js';
import './Handles-af859b7b.js';
import './Identifiable-3ad643f8.js';
import './Map-566c621c.js';
import './Basemap-ad33b4b0.js';
import './loadAll-37e49bde.js';
import './asyncUtils-015dfd6e.js';
import './Portal-ff63481f.js';
import './intl-21ab9759.js';
import './locale-b874fc68.js';
import './assets-73c8998f.js';
import './PortalItem-4692b2a9.js';
import './writeUtils-7e5aaca1.js';
import './compilerUtils-7bbb76dc.js';
import './enumeration-7d0c165d.js';
import './opacityUtils-b92214c2.js';
import './CollectionFlattener-af542a66.js';
import './basemapUtils-9ae6960d.js';
import './TablesMixin-751fb22e.js';
import './Layer-aafbe66d.js';
import './TimeExtent-02acfb1c.js';
import './PopupTemplate-d97f5e88.js';
import './fieldUtils-22be41cd.js';
import './HeightModelInfo-992659fb.js';
import './unitUtils-b17203be.js';
import './GraphicsCollection-60679841.js';
import './Graphic-bb07b7e4.js';
import './symbols-9e680ec7.js';
import './SimpleLineSymbol-9959d1ea.js';
import './persistableUrlUtils-59858a7e.js';
import './uid-6beaca4c.js';
import './widget-734a78a2.js';
import './uuid-630c0c55.js';
import './QueryTask-55cf149f.js';
import './Query-619f76b0.js';
import './Field-728fb193.js';
import './fieldType-6799091f.js';
import './Task-41e0c8b8.js';
import './query-de9ba206.js';
import './normalizeUtils-5edbbb73.js';
import './pbfQueryUtils-9ef2116f.js';
import './pbf-9fd5cf83.js';
import './queryZScale-688c1e0e.js';
import './zscale-9df5d655.js';
import './TopFeaturesQuery-b22907ac.js';
import './FeatureSet-d8329cbc.js';
import './FeatureLayer-a1f2dd15.js';
import './UniqueValueRenderer-260b50e9.js';
import './jsonUtils-4c6963ee.js';
import './ColorStop-ed1033bb.js';
import './diffUtils-530d997b.js';
import './sizeVariableUtils-6d1564c8.js';
import './visualVariableUtils-86a9e524.js';
import './lengthUtils-824a0190.js';
import './styleUtils-8b593a34.js';
import './jsonUtils-cb46c967.js';
import './LRUCache-eed24cc2.js';
import './MemCache-b33cfc4b.js';
import './MultiOriginJSONSupport-859401da.js';
import './workers-bd1ea274.js';
import './APIKeyMixin-7fe44a14.js';
import './ArcGISService-32a080a6.js';
import './arcgisLayerUrl-cb5a8728.js';
import './BlendLayer-b9fc1ffb.js';
import './CustomParametersMixin-79fc7530.js';
import './OperationalLayer-a01538e1.js';
import './PortalLayer-722467e6.js';
import './RefreshableLayer-a609d261.js';
import './ScaleRangeLayer-9b1bf210.js';
import './TemporalLayer-f1ac30a1.js';
import './TimeInfo-ba3374ff.js';
import './labelingInfo-c6f27ee6.js';
import './LabelClass-e4354cdb.js';
import './labelUtils-7d1afc11.js';
import './defaults-31c9613a.js';
import './defaultsJSON-0467bd38.js';
import './featureReductionUtils-78800e19.js';
import './FeatureType-97537d09.js';
import './fieldProperties-4363f1e0.js';
import './FieldsIndex-f71b4f3d.js';
import './styleUtils-58b9b121.js';
import './popupUtils-5b007a8e.js';
import './utils-4028018e.js';
import './ItemCache-2457b327.js';
import './capabilities-39806eb7.js';
import './clickToleranceUtils-30a0811c.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
const w=n.getLogger("esri.views.2d.layers.TileLayerView2D"),d=[0,0];let _=class extends(i(p(r(l(d$1))))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null;}initialize(){const e=this.layer.tileInfo,i=e&&e.spatialReference;let r;i||(r=new s("layerview:tiling-information-missing","The layer doesn't provide tiling information",{layer:this.layer})),i.equals(this.view.spatialReference)||(r=new s("layerview:spatial-reference-incompatible","The spatial reference of this layer does not meet the requirements of the view",{layer:this.layer})),this.watch("resampling",(()=>{this.refresh();})),r&&this.addResolvingPromise(Promise.reject(r));}get resampling(){return !("resampling"in this.layer)||!1!==this.layer.resampling}hitTest(){return null}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume(),this.notifyChange("updating");}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null;this._tileInfoView=new h(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new p$1({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(e,t)=>this.fetchTile(e,t)}),this._tileStrategy=new c({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),this.requestUpdate(),this.container.requestRender(),super.attach();}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null;}moveStart(){this.requestUpdate();}viewChange(){this.requestUpdate();}moveEnd(){this.requestUpdate();}createFetchPopupFeaturesQueryGeometry(e,t){return a(e,t,this.view)}async doRefresh(){this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach((e=>this._enqueueTileFetch(e))),this.notifyChange("updating"));}isUpdating(){var e;return (null==(e=this._fetchQueue)?void 0:e.length)>0}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return [i.x,i.y]=this._tileInfoView.getTileCoords(d,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",(()=>e.destroy())),this.requestUpdate();}async fetchTile(e$1,t$1){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,a=!t(t$1)&&t$1.signal;if(!i)try{return await this._fetchImage(e$1,a)}catch(m){if(!g(m)&&!this.resampling)return this._createBlankImage();throw m}const l=new e(0,0,0,0);let o;try{if(await i.fetchAvailabilityUpsample(e$1.level,e$1.row,e$1.col,l,{signal:a}),l.level!==e$1.level&&!this.resampling)return this._createBlankImage();o=await this._fetchImage(l,a);}catch(m){if(g(m))throw m;o=await this._fetchImage(e$1,a);}const{level:h,row:n,col:u}=l;return this.resampling&&h!==e$1.level?this._resampleImage(o,h,n,u,e$1.level,e$1.row,e$1.col):o}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",(()=>this.requestUpdate()));}catch(t){g(t)||w.error(t);}this.requestUpdate();}}async _fetchImage(e,t){return this.layer.fetchTile(e.level,e.row,e.col,{timestamp:this.refreshTimestamp,signal:t})}_resampleImage(e,t,i,r,s,a,l){const o=this._tileInfoView.tileInfo.size,h=this._tileInfoView.getTileResolution(t),n=this._tileInfoView.getTileResolution(s);let c=this._tileInfoView.getLODInfoAt(s);const u=c.getXForColumn(l),m=c.getYForRow(a);c=this._tileInfoView.getLODInfoAt(t);const p=c.getXForColumn(r),f=c.getYForRow(i),g=Math.round((u-p)/h),y=Math.round(-(m-f)/h),w=Math.round(o[0]*(n/h)),d=Math.round(o[1]*(n/h)),_=this._createBlankImage();return _.getContext("2d").drawImage(e,g,y,w,d,0,0,o[0],o[1]),_}_createBlankImage(){const e=this._tileInfoView.tileInfo.size,t=document.createElement("canvas");return [t.width,t.height]=e,t}};e$1([y()],_.prototype,"resampling",null),_=e$1([n$1("esri.views.2d.layers.TileLayerView2D")],_);var I=_;

export default I;

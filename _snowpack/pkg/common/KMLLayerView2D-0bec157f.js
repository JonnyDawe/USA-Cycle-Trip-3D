import { e as e$1 } from './JSONSupport-9346590f.js';
import { L as L$1, r as r$1, q as b, C as C$1 } from './Loadable-d16b3d7d.js';
import { L } from './Collection-32506e74.js';
import { u } from './Handles-af859b7b.js';
import { r, t as t$1 } from './Message-70b34921.js';
import { y, n } from './subclass-fe5fcf78.js';
import { M as M$1 } from './Polyline-ccd8fb47.js';
import { D, H } from './projection-c73dd3c4.js';
import { k } from './SpatialReference-843b1520.js';
import { x, g } from './Point-ee7951c3.js';
import { b as b$1, g as g$2, d } from './kmlUtils-105433bd.js';
import { e } from './Task-41e0c8b8.js';
import { a } from './GraphicsCollection-60679841.js';
import { g as g$1 } from './Bitmap-77e47ee2.js';
import { t } from './BitmapContainer-0013893c.js';
import { l } from './LayerView2D-71fd8a44.js';
import { i } from './GraphicContainer-b574d9d6.js';
import { i as it } from './BaseGraphicContainer-f951d3b8.js';
import { d as d$1 } from './LayerView-0b9de845.js';
import './promiseUtils-2ff2b194.js';
import './jsonMap-e142bd84.js';
import './mathUtils-a477cc74.js';
import './unitUtils-b17203be.js';
import './mat4-8eb66d33.js';
import './assets-73c8998f.js';
import './aaBoundingRect-68336c41.js';
import './reader-fa0f173d.js';
import './PopupTemplate-d97f5e88.js';
import './fieldUtils-22be41cd.js';
import './enumeration-7d0c165d.js';
import './intl-21ab9759.js';
import './locale-b874fc68.js';
import './Identifiable-3ad643f8.js';
import './aaBoundingBox-c0155c39.js';
import './jsonUtils-cb46c967.js';
import './UniqueValueRenderer-260b50e9.js';
import './symbols-9e680ec7.js';
import './SimpleLineSymbol-9959d1ea.js';
import './Color-ae84a22a.js';
import './opacityUtils-b92214c2.js';
import './persistableUrlUtils-59858a7e.js';
import './collectionUtils-a13e45d8.js';
import './Portal-ff63481f.js';
import './jsonUtils-4c6963ee.js';
import './ColorStop-ed1033bb.js';
import './diffUtils-530d997b.js';
import './sizeVariableUtils-6d1564c8.js';
import './visualVariableUtils-86a9e524.js';
import './Graphic-bb07b7e4.js';
import './uid-6beaca4c.js';
import './jsonUtils-f0a19240.js';
import './compilerUtils-7bbb76dc.js';
import './lengthUtils-824a0190.js';
import './styleUtils-8b593a34.js';
import './LRUCache-eed24cc2.js';
import './MemCache-b33cfc4b.js';
import './FeatureSet-d8329cbc.js';
import './Field-728fb193.js';
import './fieldType-6799091f.js';
import './mat3-6cb40036.js';
import './DefaultUI-99d89841.js';
import './watchUtils-06a91cc9.js';
import './Map-566c621c.js';
import './Basemap-ad33b4b0.js';
import './loadAll-37e49bde.js';
import './asyncUtils-015dfd6e.js';
import './PortalItem-4692b2a9.js';
import './writeUtils-7e5aaca1.js';
import './CollectionFlattener-af542a66.js';
import './HandleOwner-fbf91095.js';
import './basemapUtils-9ae6960d.js';
import './TablesMixin-751fb22e.js';
import './Layer-aafbe66d.js';
import './TimeExtent-02acfb1c.js';
import './HeightModelInfo-992659fb.js';
import './Queue-a5bdb7c1.js';
import './widget-734a78a2.js';
import './uuid-630c0c55.js';
import './QueryTask-55cf149f.js';
import './Query-619f76b0.js';
import './query-de9ba206.js';
import './normalizeUtils-5edbbb73.js';
import './pbfQueryUtils-9ef2116f.js';
import './pbf-9fd5cf83.js';
import './OptimizedFeature-ccef5b1d.js';
import './OptimizedFeatureSet-be12a9b8.js';
import './queryZScale-688c1e0e.js';
import './zscale-9df5d655.js';
import './TopFeaturesQuery-b22907ac.js';
import './featureConversionUtils-3ad98dca.js';
import './FeatureLayer-a1f2dd15.js';
import './MultiOriginJSONSupport-859401da.js';
import './workers-bd1ea274.js';
import './APIKeyMixin-7fe44a14.js';
import './ArcGISService-32a080a6.js';
import './arcgisLayerUrl-cb5a8728.js';
import './BlendLayer-b9fc1ffb.js';
import './CustomParametersMixin-79fc7530.js';
import './OperationalLayer-a01538e1.js';
import './PortalLayer-722467e6.js';
import './RefreshableLayer-a609d261.js';
import './ScaleRangeLayer-9b1bf210.js';
import './TemporalLayer-f1ac30a1.js';
import './TimeInfo-ba3374ff.js';
import './labelingInfo-c6f27ee6.js';
import './LabelClass-e4354cdb.js';
import './labelUtils-7d1afc11.js';
import './defaults-31c9613a.js';
import './defaultsJSON-0467bd38.js';
import './featureReductionUtils-78800e19.js';
import './FeatureType-97537d09.js';
import './fieldProperties-4363f1e0.js';
import './FieldsIndex-f71b4f3d.js';
import './styleUtils-58b9b121.js';
import './popupUtils-5b007a8e.js';
import './utils-4028018e.js';
import './ItemCache-2457b327.js';
import './vec2f32-556b449a.js';
import './vec2-513a0296.js';
import './vec2f64-3fb878b3.js';
import './capabilities-39806eb7.js';
import './FramebufferObject-238df962.js';
import './Texture-454f8135.js';
import './DisplayObject-8d4c95bb.js';
import './brushes-b53a5560.js';
import './definitions-8237c146.js';
import './rasterUtils-8b815ad2.js';
import './Utils-12055aa8.js';
import './ShaderCompiler-b2adc15a.js';
import './config-b1f55e66.js';
import './GeometryUtils-d396765a.js';
import './MaterialKey-5b784827.js';
import './WGLContainer-b2490c0f.js';
import './Container-a08586d2.js';
import './mat4f32-5ff6470f.js';
import './earcut-d81146f9.js';
import './projectionSupport-87ac6706.js';
import './json-1b357c88.js';
import './Matcher-68df2c03.js';
import './TileStrategy-7442f970.js';
import './TileInfoView-a80dd3da.js';
import './TileKey-86c6b8c5.js';
import './TileStore-c9add4a8.js';
import './FeatureSetReader-bf914a8a.js';
import './centroid-80fbdb27.js';
import './visualVariablesUtils-d2faa315.js';
import './visualVariablesUtils-32ef6e0c.js';
import './quickselect-f4197880.js';
import './tileUtils-00f68691.js';
import './schemaUtils-80abf9d4.js';
import './CIMSymbolHelper-6b8d9205.js';
import './Rect-b93f4c2a.js';
import './BidiEngine-e1f5d573.js';
import './MD5-e12d5739.js';
import './TileClipper-d1dfdbf2.js';
import './cimAnalyzer-ea6a3f24.js';
import './callExpressionWithFeature-28066cb0.js';
import './quantizationUtils-28a0adf6.js';
import './FeatureContainer-80ee0f52.js';
import './TiledDisplayObject-38ffcb88.js';
import './TileContainer-b847de65.js';
import './GraphicsView-6dd0c891.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
class C{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[];}}let j=class extends(l(d$1)){constructor(){super(...arguments),this._handles=new u,this._bitmapIndex=new Map,this._mapImageContainer=new t,this._kmlVisualData=new C,this.allVisiblePoints=new a,this.allVisiblePolylines=new a,this.allVisiblePolygons=new a,this.allVisibleMapImages=new L;}hitTest(e,i){if(this.suspended||!this._pointsView&&!this._polylinesView&&!this._polygonsView)return Promise.resolve(null);const t=[this._pointsView.hitTest(e,i),this._polylinesView.hitTest(e,i),this._polygonsView.hitTest(e,i)];return Promise.all(t).then((e=>e.filter((e=>(e&&(e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e);}attach(){this._handles.add([this.allVisibleMapImages.on("change",(e=>{e.added.forEach((e=>this._addMapImage(e))),e.removed.forEach((e=>this._removeMapImage(e)));}))]),this.container.addChild(this._mapImageContainer),this._polygonsView=new it({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new i(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new it({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new i(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new it({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new i(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.watch("layer.visibleSublayers",(e=>{for(const[i,t]of this._kmlVisualData.allSublayers)t.visibility=0;for(const i of e){const e=this._kmlVisualData.allSublayers.get(i.id);e&&(e.visibility=1);}this._refreshCollections();})),this._fetchingPromise=this._fetchService().then((()=>{this._fetchingPromise=null,this.notifyChange("updating");}));}detach(){this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null);}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange();}moveEnd(){}isUpdating(){return null!=this._fetchingPromise||this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&L$1(e.href,{responseType:"image"}).then((({data:i})=>{let t=M$1.fromJSON(e.extent);x(t,this.view.spatialReference)&&(t=g(t,this.view.spatialReference));const s=new g$1(i,"standard");s.x=t.xmin,s.y=t.ymax,s.resolution=t.width/i.naturalWidth,s.rotation=e.rotation,this._mapImageContainer.addChild(s),this._bitmapIndex.set(e,s);}));}async _getViewDependentUrl(e$1,t){const{viewFormat:s,viewBoundScale:a,httpQuery:h}=e$1;if(r(s)){if(t$1(t))throw new Error("Loading this network link requires a view state.");let p;if(await D(),r(a)&&1!==a){const e=new M$1(t.extent);e.expand(a),p=e;}else p=t.extent;p=H(p,k.WGS84);const w=H(p,k.WebMercator),g=p.xmin,u=p.xmax,_=p.ymin,V=p.ymax,f=t.size[0]*t.pixelRatio,v=t.size[1]*t.pixelRatio,S=Math.max(w.width,w.height),I={"[bboxWest]":g.toString(),"[bboxEast]":u.toString(),"[bboxSouth]":_.toString(),"[bboxNorth]":V.toString(),"[lookatLon]":p.center.x.toString(),"[lookatLat]":p.center.y.toString(),"[lookatRange]":S.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":p.center.x.toString(),"[lookatTerrainLat]":p.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":p.center.x.toString(),"[cameraLat]":p.center.y.toString(),"[cameraAlt]":S.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":f.toString(),"[vertPixels]":v.toString(),"[terrainEnabled]":"0","[clientVersion]":r$1,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},P=e=>{for(const i in e)for(const t in I)e[i]=e[i].replace(t,I[t]);},x=b(s);P(x);let k$1={};r(h)&&(k$1=b(h),P(k$1));const C=e(e$1.href);C.query={...C.query,...x,...k$1};return `${C.path}?${C$1(x)}`}return e$1.href}async _fetchService(){const e=new C;await this._loadVisualData(this.layer.url,e),this._kmlVisualData=e,this._refreshCollections();}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e)));}_isSublayerVisible(e){const i=this._kmlVisualData.allSublayers.get(e);return !!i.visibility&&(-1===i.parentFolderId||this._isSublayerVisible(i.parentFolderId))}_loadVisualData(e,i){return this._fetchParsedKML(e).then((async e=>{for(const t of e.sublayers){i.allSublayers.set(t.id,t);const e=t.points?await b$1(t.points):[],s=t.polylines?await b$1(t.polylines):[],a=t.polygons?await b$1(t.polygons):[],o=t.mapImages||[];if(i.allPoints.push(...e.map((e=>({item:e,sublayerId:t.id})))),i.allPolylines.push(...s.map((e=>({item:e,sublayerId:t.id})))),i.allPolygons.push(...a.map((e=>({item:e,sublayerId:t.id})))),i.allMapImages.push(...o.map((e=>({item:e,sublayerId:t.id})))),t.networkLink){const e=await this._getViewDependentUrl(t.networkLink,this.view.state);await this._loadVisualData(e,i);}}}))}_fetchParsedKML(e){return g$2(e,this.view.spatialReference,this.layer.refreshInterval).then((e=>d(e.data)))}_removeMapImage(e){const i=this._bitmapIndex.get(e);i&&(this._mapImageContainer.removeChild(i),this._bitmapIndex.delete(e));}};e$1([y()],j.prototype,"_pointsView",void 0),e$1([y()],j.prototype,"_polylinesView",void 0),e$1([y()],j.prototype,"_polygonsView",void 0),e$1([y()],j.prototype,"_fetchingPromise",void 0),e$1([y()],j.prototype,"updating",void 0),j=e$1([n("esri.views.2d.layers.KMLLayerView2D")],j);var M=j;

export default M;

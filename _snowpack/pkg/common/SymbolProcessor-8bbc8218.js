import { e } from './JSONSupport-9346590f.js';
import { a as a$1, c as s$1, g } from './promiseUtils-2ff2b194.js';
import { n, c as s, r, A, t, R as f, f as e$1 } from './Message-70b34921.js';
import { n as n$1 } from './subclass-fe5fcf78.js';
import { m, a } from './diffUtils-530d997b.js';
import { k as k$1 } from './SpatialReference-843b1520.js';
import { r as re } from './Utils-12055aa8.js';
import { r as r$1, k as k$2, u, i, E, c as t$1 } from './Matcher-68df2c03.js';
import { n as n$2 } from './schemaUtils-80abf9d4.js';
import { p } from './BaseProcessor-5bc80402.js';
import { v } from './TileStore-c9add4a8.js';
import './Collection-32506e74.js';
import './Loadable-d16b3d7d.js';
import './Polyline-ccd8fb47.js';
import './Point-ee7951c3.js';
import './reader-fa0f173d.js';
import './jsonMap-e142bd84.js';
import './mathUtils-a477cc74.js';
import './Texture-454f8135.js';
import './definitions-8237c146.js';
import './TileStrategy-7442f970.js';
import './vec2-513a0296.js';
import './TileInfoView-a80dd3da.js';
import './Queue-a5bdb7c1.js';
import './TileKey-86c6b8c5.js';
import './tileUtils-00f68691.js';
import './Query-619f76b0.js';
import './TimeExtent-02acfb1c.js';
import './enumeration-7d0c165d.js';
import './jsonUtils-f0a19240.js';
import './Field-728fb193.js';
import './fieldUtils-22be41cd.js';
import './fieldType-6799091f.js';
import './SimpleLineSymbol-9959d1ea.js';
import './Color-ae84a22a.js';
import './visualVariablesUtils-d2faa315.js';
import './visualVariablesUtils-32ef6e0c.js';
import './MaterialKey-5b784827.js';
import './featureConversionUtils-3ad98dca.js';
import './OptimizedFeature-ccef5b1d.js';
import './OptimizedFeatureSet-be12a9b8.js';
import './CIMSymbolHelper-6b8d9205.js';
import './aaBoundingRect-68336c41.js';
import './vec2f32-556b449a.js';
import './defaults-31c9613a.js';
import './symbols-9e680ec7.js';
import './opacityUtils-b92214c2.js';
import './persistableUrlUtils-59858a7e.js';
import './collectionUtils-a13e45d8.js';
import './Portal-ff63481f.js';
import './intl-21ab9759.js';
import './locale-b874fc68.js';
import './assets-73c8998f.js';
import './defaultsJSON-0467bd38.js';
import './GeometryUtils-d396765a.js';
import './earcut-d81146f9.js';
import './TileClipper-d1dfdbf2.js';
import './cimAnalyzer-ea6a3f24.js';
import './callExpressionWithFeature-28066cb0.js';
import './quantizationUtils-28a0adf6.js';
import './LRUCache-eed24cc2.js';
import './MemCache-b33cfc4b.js';
import './UniqueValueRenderer-260b50e9.js';
import './jsonUtils-4c6963ee.js';
import './ColorStop-ed1033bb.js';
import './sizeVariableUtils-6d1564c8.js';
import './visualVariableUtils-86a9e524.js';
import './Graphic-bb07b7e4.js';
import './PopupTemplate-d97f5e88.js';
import './Identifiable-3ad643f8.js';
import './uid-6beaca4c.js';
import './compilerUtils-7bbb76dc.js';
import './lengthUtils-824a0190.js';
import './unitUtils-b17203be.js';
import './styleUtils-8b593a34.js';
import './jsonUtils-cb46c967.js';
import './normalizeUtils-5edbbb73.js';
import './Rect-b93f4c2a.js';
import './BidiEngine-e1f5d573.js';
import './MD5-e12d5739.js';
import './HandleOwner-fbf91095.js';
import './Handles-af859b7b.js';
import './watchUtils-06a91cc9.js';
import './FeatureSetReader-bf914a8a.js';
import './centroid-80fbdb27.js';
import './FieldsIndex-f71b4f3d.js';
import './quickselect-f4197880.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
function j(e,t){return (!e.minScale||e.minScale>=t)&&(!e.maxScale||e.maxScale<=t)}function k(e){const t=e.message,s={message:{data:{},tileKey:t.tileKey},transferList:new Array};for(const a in t.data){const e=t.data[a];if(s.message.data[a]=null,r(e)){const t=e.stride,r=e.indices.slice(0),o=e.vertices.slice(0),n=e.records.slice(0),l={stride:t,indices:r,vertices:o,records:n,metrics:A(e.metrics,(e=>e.slice(0)))};s.transferList.push(r,o,n),s.message.data[a]=l;}}return s}n.getLogger("esri.views.2d.layers.features.processors.SymbolProcessor");let x=class extends p{constructor(){super(...arguments),this.type="symbol",this._matchers={feature:null,aggregate:null},this._bufferData=new Map;}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))]);}destroy(){}get supportsTileUpdates(){return !0}async update(e,s$1){const r=s$1.schema.processors[0];if("symbol"!==r.type)return;const i=m(this._schema,r);a(i,"mesh")&&(s("esri-2d-update-debug")&&console.debug("Applying Update - Processor:",i),e.mesh=!0,e.why.mesh.push("Symbology changed"),this._schema=r,this._factory=this._createFactory(r),this._factory.update(r,this.tileStore.tileScheme.tileInfo));}onTileMessage(e,t,s,r){return a$1(r),this._onTileData(e,t,s,r)}onTileClear(e){const t={clear:!0};return this._bufferData.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t})}onTileError(e,t,s){const r=s.signal,i={tileKey:e.id,error:t};return this.remoteClient.invoke("tileRenderer.onTileError",i,{signal:r})}onTileUpdate(e){for(const t of e.removed){if(!this._bufferData.has(t.key.id))continue;this._bufferData.get(t.key.id).forEach((e=>{const t=new Set;re((s=>{const i=e.message.data[s];if(r(i)){const e=r$1.from(i.records).getCursor();for(;e.next();)t.add(e.id);}}));const s=e.message.tileKey,i={type:"update",addOrUpdate:null};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:s,data:i})})),this._bufferData.delete(t.key.id);}for(const t of e.added)this._bufferData.forEach((e=>{for(const s of e)s.message.tileKey===t.id&&this._updateTileMesh("append",t,k(s),[],!1,!1,null);}));}_addBufferData(e,t){this._bufferData.has(e)||this._bufferData.set(e,[]),this._bufferData.get(e).push(k(t));}_createFactory(e){const{geometryType:t,objectIdField:s,fields:r}=this.service,a=(e,t)=>this.remoteClient.invoke("tileRenderer.getMaterialItems",e,t),o={geometryType:t,fields:r,spatialReference:k$1.fromJSON(this.spatialReference)},n=new k$2(a,this.tileStore.tileScheme.tileInfo),{matcher:l,aggregateMatcher:c}=e.mesh;return this._store=n,this._matchers.feature=u(l,n,o),this._matchers.aggregate=A(c,(e=>u(e,n,o))),new i(t,s,n)}async _onTileData(e,t$1,s,r){const{type:i,addOrUpdate:o,remove:n}=t$1,l=t$1.end;if(!o){const t={type:i,addOrUpdate:null,remove:n,clear:!1,end:l};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}const d=this._processFeatures(e,o,s,r);try{const s=await d;if(t(s)){const t={type:i,addOrUpdate:null,remove:n,clear:!1,end:l};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}for(const t of s)e.key.id!==t.message.tileKey&&this._addBufferData(e.key.id,t);await s$1(s.map((s=>{const a=e.key.id===s.message.tileKey,o=a?t$1.remove:[],n=a&&t$1.end;return this._updateTileMesh(i,e,s,o,n,t$1.clear,r.signal)})));}catch(m){this._handleError(e,m,r);}}async _updateTileMesh(e,t,s,r,a,o,c){const d=e,m=s.message.tileKey;m!==t.key.id&&(a=!1);const u=A(s,(e=>e.message)),f=A(s,(e=>e.transferList))||[],h={type:d,addOrUpdate:u,remove:r,clear:!1,end:a},p={transferList:e$1(f)||[],signal:c};return a$1(p),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:m,data:h},p)}async _processFeatures(e,t$1,s,r){if(t(t$1)||!t$1.hasFeatures)return null;const i={transform:e.transform,hasZ:!1,hasM:!1},o=this._factory,n={viewingMode:"",scale:e.scale},c=await this._matchers.feature,d=await this._matchers.aggregate;a$1(r);const m=this._getLabelInfos(e,t$1);return await o.analyze(t$1.getCursor(),c,d,i,n),a$1(r),this._writeFeatureSet(e,t$1,i,m,o,s)}_writeFeatureSet(e,t,s,i,a,o){const n=t.getSize(),l="simple"===this._schema.mesh.matcher.type&&this._schema.mesh.matcher.isDotDensity,c=new E(e.key.id,{features:n,records:n,metrics:0},l,o,!0),d={viewingMode:"",scale:e.scale},m=t.getCursor();for(;m.next();)try{const t=m.getDisplayId(),o=r(i)?i.get(t):null;a.writeCursor(c,m,s,d,e.level,o);}catch(f){}const u=e.tileInfoView.tileInfo.isWrappable;return c.serialize(u)}_handleError(e,t,s){if(!g(t)){const r={tileKey:e.id,error:t.message};return this.remoteClient.invoke("tileRenderer.onTileError",r,{signal:s.signal})}}_getLabelingSchemaForScale(e){const t$1=this._schema.mesh.labels;if(t(t$1))return null;if("subtype"===t$1.type){const s={type:"subtype",classes:{}};let r=!1;for(const i in t$1.classes){const a=t$1.classes[i].filter((t=>j(t,e.scale)));r=r||!!a.length,s.classes[i]=a;}return r?s:null}const s=t$1.classes.filter((t=>j(t,e.scale)));return s.length?{type:"simple",classes:s}:null}_getLabels(e,t){if("subtype"===t.type){var s;const r=this.service.subtypeField,i=f(r,"Expected to find subtype Field"),a=e.readAttribute(i);return null==a?[]:null!=(s=t.classes[a])?s:[]}return t.classes}_getLabelInfos(e,t$2){const s=this._getLabelingSchemaForScale(e);if(t(s))return null;const r=new Map,i=t$2.getCursor();for(;i.next();){const e=i.getDisplayId(),t=[],a=v(e),o=a&&1!==i.readAttribute("cluster_count")?"aggregate":"feature",n=this._getLabels(i,s);for(const s of n){if(s.target!==o)continue;const r=i.getStorage(),n=a&&"feature"===o?r.getComputedStringAtIndex(i.readAttribute("referenceId"),s.fieldIndex):r.getComputedStringAtIndex(e,s.fieldIndex);if(!n)continue;const l=n$2(n.toString()),c=l[0],d=l[1];this._store.getMosaicItem(s.symbol,t$1(c)).then((e=>{t[s.index]={glyphs:e.glyphMosaicItems,rtl:d,index:s.index};}));}r.set(e,t);}return r}};x=e([n$1("esri.views.2d.layers.features.processors.SymbolProcessor")],x);var I=x;

export default I;
